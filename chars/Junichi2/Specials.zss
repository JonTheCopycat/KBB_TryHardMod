[Function UnblockableSign()]
Explod{
    anim: F30000;
    id: 30000;
    pos: -30 + (cond(BackEdgeBodyDist <= 30 || FrontEdgeBodyDist <= 30, 60, 0)),-50;
    postype: p1;
    bindtime: -1;
    vel: 0,0;
    accel: 0,0;
    random: 0,0;
    pausemovetime: 999;
    supermovetime: 999;
    ontop: 0;
    removeongethit: 0;
    ignorehitpause: 1;
    facing: facing;
    vfacing: 1;
    scale: 0.6, 0.6;
    sprpriority: 5;
    removetime: -2;
}

[Function PowerDelay()]
Helper{
    name: "Power Delay";
    id: 56000;
    stateno: 56000;
    pos: 9999, 9999;
    postype: p1;
    facing: 1;
    keyctrl: 0;
    ownpal: 0;
    supermovetime: 0;
    pausemovetime: 0;
}

[Function SuperMovePause(time, actionable)]
SuperPause{
    anim: 92006;
    time: $time;
    sound: 20, 0;
    pos: 0, -20;
    movetime: ifelse($actionable != 0, $time, 0);
    darken: 1;
    p2defmul: 1;
    poweradd: 0;
    endcmdbuftime: 7;
}

[Function HelperSetup()]
RootMapSet{map: "helperGuarded"; value: moveguarded; }
RootMapSet{map: "helperHit"; value: movehit; }
ignorehitpause{
    AttackMulSet{value: 1 * 0.99**root,var(11); }

    if numhelper(4020) = 0 && movecountered = 1 {
        Helper{
            helpertype: normal;
            name: "Counterhit TSP";
            supermovetime: 999999999999999999999;
            pausemovetime: 999999999999999999999;
            id: 4020;
            stateno: 4020;
            postype: p1;
            facing: 1;
            keyctrl: 0;
            ownpal: 1;
        }
    }
}

#===============================================================================
# Killer Arsenal Combo:
#-------------------------------------------------------------------------------
[Statedef 20020; type: S; movetype: A; physics: S; juggle: 0; ctrl: 0;
anim: 20020; poweradd: -1500; velset: 0,0; sprpriority: 2;]

ignorehitpause {
    MapSet{map: "bursterable"; value: 1;}

    if time = 0 {
        #Set Stance to Baton if not already in it
        var(10) := 2;
    } else if time = 1 {
        call UnblockableSign();
        call SuperMovePause(20, 1);
    }

    
    if AnimElem = 1 {
        PlaySnd{value: S1, 1; volumescale: 50; }
    } else if AnimElem = 9 {
        PlaySnd{value: S0, 10; volumescale: 200; channel: 0; }
        let extra = ifelse(enemy,movetype = A, 7,0);
        HitDef{
            attr: S, NP;
            animtype: Hard;
            damage: 60;
            kill: 0;
            hitflag: MAFD;
            guardflag: ;
            pausetime: 10, 100;
            guard.hittime: 15;
            sparkno: 0; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: 5,4;
            guardsound: 6, 11;
            ground.type: High;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            guard.velocity: -6;
            ground.velocity: -1, -2;
            air.velocity: -1, -1;
            mindist: 20, 0;
            maxdist: 500, 0;
            Fall: 1;
            Envshake.time: 20;
            Fall.recovertime: 40 + $extra;
        }
    }

    if movehit = 1 {
        AfterImage{time:195; trans: add; }
    }

    if AnimTime = -1 {
        call PowerDelay();
    }

    if AnimTime = 0 {
        if movehit {
            ChangeState{value: 20021; }
        } else {
            ChangeState{value: 0; ctrl: 1; }
        }
    }
}

# Killer Arsenal Combo:
[Statedef 20021; type: S; movetype: A; physics: S; juggle: 0; ctrl: 0;
anim: 20021; poweradd: 0; velset: 0,0; sprpriority: 2;]
ignorehitpause{
    MapSet{map: "bursterable"; value: 1;}
    VelSet{x: 2.5;}

    if AnimElem = 2 || AnimElem = 4 || AnimElem = 6 || AnimElem = 8 {
        PlaySnd{value: S0, 10; volumescale: 200; }

        let extra = ifelse(enemy,movetype = A, 7,0);
        HitDef{
            getpower: 0;
            attr: S, NA;
            animtype: Medium;
            damage: 10;
            kill: 0;
            hitflag: MAFD;
            guardflag: MAF;
            pausetime: 6, 80;
            guard.pausetime: 6, 6;
            sparkno: 0; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: 5,1;
            guardsound: 6, 11;
            ground.type: High;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            ground.velocity: -2, -2.5;
            air.velocity: -2, -2.5;
            mindist: 20, -2;
            maxdist: 500, -5;
            Fall: 1;
            Envshake.time: 5;
            Fall.recovertime: 20 + $extra;
        }
    }

    if time >= 25 {
        if !movehit {
            ChangeState{value: 0; ctrl: 1; }
        }

        if (AnimElem = 1 || AnimElem = 3 || AnimElem = 5 || AnimElem = 7)
        && movehit && p2bodydist x < 60 {
            ChangeState{value: 20022; }
        }
    }
}

# Taser And Bomb:
[Statedef 20022; type: S; movetype: A; physics: S; juggle: 0; ctrl: 0;
anim: 20022; poweradd: 0; velset: 0,0; sprpriority: 2;]
ignorehitpause {
    MapSet{map: "bursterable"; value: 1;}

    if AnimElem = 3 {
        VelSet{x: p2bodydist x / 6;}
    } else if AnimElem = 6 || AnimElem = 8 || AnimElem = 10 {
        let extra = ifelse(enemy,movetype = A, 7,0);
        HitDef{
            getpower: 0;
            attr: S, NA;
            animtype: Hard;
            damage: 5;
            kill: 0;
            hitflag: MAFD;
            guardflag: MAF;
            pausetime: 4, 50;
            sparkno: 0; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: 5,1;
            guardsound: 6, 11;
            ground.type: High;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            ground.velocity: -1, -3;
            air.velocity: -1, -3;
            Fall: 1;
            Envshake.time: 10;
            Fall.recover: 0;
        }
    } else if AnimElem = 14 {
        VelSet{x: -3;}
    } else if AnimElem = 17 {
        VelSet{x: 6; }
    } else if AnimElem = 18 {
        HitDef{
            getpower: 0;
            attr: S, NA;
            animtype: Hard;
            damage: 10;
            kill: 0;
            hitflag: MAFD;
            guardflag: MAF;
            pausetime: 4, 12;
            guard.pausetime: 4, 8;
            guard.hittime: 15;
            sparkno: 0; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: 5,1;
            guardsound: 6, 11;
            ground.type: Low;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            ground.velocity: -3, -4;
            air.velocity: -3, -4;
            Fall: 1;
            Envshake.time: 10;
            Fall.recovertime: 40 + $extra;
        }
    } else if AnimElem = 20 {
        VelSet{x:-8; }
    } else if AnimElem = 21 {
        Helper{
            name: "Contact Bomb";
            id: 20025;
            stateno: 20025;
            pos: p2bodydist x, p2bodydist y;
            postype: p1;
            facing : 1;
            keyctrl: 0;
            ownpal: 0;
            supermovetime: 0;
            pausemovetime: 0;
            inheritjuggle: 1;
        }
    }

    if AnimTime = 0 {
        ChangeState{value: 0; ctrl: 1; }
    }
}

# Bomb Super Explode:
[Statedef 20025; type: A; movetype: A; physics: N; juggle: 0; ctrl: 0;
anim: 12000; velset: 0,0; sprpriority: 2;]

AttackDist{value: 40;}

call HelperSetup();

ignorehitpause persistent(0) if movehit {
    parent,var(11) := parent,var(11) + 10;
}

if time = 0 {
    PlaySnd{value:S6, 1; volumescale: 999}
}

if (map(juggle) < 100 || hitcount != 0) {
    if AnimElem = 1 {
        let extra = ifelse(enemy,movetype = A, 7,0);
        HitDef{
            getpower: 0;
            attr: S, NP;
            animtype: Light;
            damage: 50;
            hitflag: MAFD;
            guardflag: MA;
            pausetime: 5, 10;
            sparkno: 2; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: S0,5;
            guardsound: 6, 10;
            ground.type: High;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            ground.velocity: -2, -1.5;
            air.velocity: -2, -1.5;
            Fall: 1;
            Envshake.time: 10;
            Fall.recovertime: 60 + $extra;
        }
    } else if AnimElem = 4 {
        let extra = ifelse(enemy,movetype = A, 7,0);
        HitDef{
            getpower: 0;
            attr: S, NP;
            animtype: Light;
            damage: 70;
            hitflag: MAFD;
            guardflag: MA;
            pausetime: 18, 18;
            sparkno: 2; 
            guard.sparkno: 13000;
            sparkxy: -8, -25;
            hitsound: S6,1;
            guardsound: 6, 10;
            ground.type: High;
            ground.slidetime: 12;
            ground.hittime: 15 + $extra;
            air.hittime: 15 + $extra;
            ground.velocity: -5, -5;
            air.velocity: -5, -5;
            Fall: 0;
            Envshake.time: 20;
            Fall.recovertime: 60 + $extra;
        }
    }
}

if AnimTime = 0 {
    DestroySelf{}
}