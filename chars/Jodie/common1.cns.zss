# Zantei State Script
# Syntax highlighter for Notepad++: https://github.com/ikemen-engine/zss_npp

#===============================================================================
# Functions
#-------------------------------------------------------------------------------
[Function HiToLoAndLoToHi()]
if command = "holddown" {
	if stateType = S {
		stateTypeSet{stateType: C; physics: C}
	}
} else if stateType = C {
	stateTypeSet{stateType: S; physics: S}
}

#-------------------------------------------------------------------------------
[Function StartStarGuardCheck()]
if command = "hold_x" && power >= 100 && NumExplod(13500) = 0 {
	Explod{
		anim: F13500;
		ID: 13500;
		pos: 20,-20;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: -1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -1;
		pausemovetime: 0;
		scale: 1,1;
		sprpriority: 8;
		ontop: 1;
		ownpal: 1;
		removeongethit: 0;
	}
}

#-------------------------------------------------------------------------------
[Function StarGuard()]
AssertSpecial{flag: NoAutoTurn;}
if p2bodydist x < -10 {
	AssertSpecial{flag:UnGuardable;redirectid:enemynear,ID;}
	if (command = "holdfwd") {
		Turn{}
	}
}
if (statetype != A) {
	if (enemy,map(lowAttack) = 1){
		stateTypeSet{statetype: C;}
	} else {
		stateTypeSet{statetype: S;}
	}
}


#-------------------------------------------------------------------------------
[Function WasBlockedCorrectly() ret]
if stateType != A {
	if command = "holddown" {
		if enemynear,map(highAttack) {
			let ret = 0;
		} else {
			let ret = 1;
		}
	} else {
		if enemynear,map(lowAttack) {
			let ret = 0;
		} else {
			let ret = 1;
		}
	}
} else {
	let ret = 1;
}

#-------------------------------------------------------------------------------
[Function StarGuardHit()]
let a = call WasBlockedCorrectly();
MapSet{map:"Wrongblock";value:1}
if $a = 1 {
	PowerAdd{value: -125;}
}
else{
	PowerAdd{value: -550;}
	Explod{
		anim: F13505;
		ID: 13505;
		pos: 22,-20;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: -1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -2;
		pausemovetime: 0;
		scale: 1.1,1.1;
		sprpriority: 9;
		ontop: 1;
		removeongethit: 0;
	}
}
if power = 0 {
	ModifyExplod{
		ID: 13500;
		anim: F13510;
		removetime: -2;
		scale: 1.1,1.1;
	}
	if statetype = A {
		ChangeState{value: 165; ctrl: 1;}
	} else {
		ChangeState{value: 160; ctrl: 1;}
	}
	
}
PlaySnd{value: F6,0; volumescale: 60;}
Helper{
	helpertype: normal;
	name: "Pushblock";
	ID: 99100;
	pos: 0,0;
	postype: p1;
	facing: 1;
	stateno: 99100;
	keyctrl: 0;
	ownpal: 0;
	supermovetime: 0;
	pausemovetime: 0;
}

#-------------------------------------------------------------------------------
[Function StopGuarding()]
if (command != "holdback" || !inGuardDist) && command != "hold_x" {
	changeState{value: 140}
}

[Function CounterCancel()]
if command = "hold_x" && command = "hold_s" && power >= 1000 {
	ChangeState{value: 820;}
}

#-------------------------------------------------------------------------------
[Function AirGuardLand()]
if sysVar(0) := (pos y >= 0 && vel y > 0) {
	velSet{y: 0}
	posSet{y: 0}
	changeState{value: ifElse(command = "holdback" && inGuardDist, 130, 52)}
}

#-------------------------------------------------------------------------------
[Function GuardShaking(anim)]
changeAnim{value: $anim}
if hitShakeOver {
	changeState{value: 151 + 2 * (command = "holddown")}
}
call HiToLoAndLoToHi();

#-------------------------------------------------------------------------------
[Function GuardKnockedBack(nextState)]
if time = 0 {
	hitVelSet{x: 1}
}
NotHitBy{value: ,HA,NT,ST,HT; time: 8;}
if time = getHitVar(slideTime) + (numexplod(13500) > 0) * 3 || hitOver
|| (numhelper(4300) > 0 && helper(4300),stateno = 4301 && time >= 8 + (numexplod(13500) > 0) * 3) {
	velSet{x: 0}
}
if time = getHitVar(ctrlTime) + (numexplod(13500) > 0) * 3
|| (numhelper(4300) > 0 && helper(4300),stateno = 4301 && time >= 8 + (numexplod(13500) > 0) * 3) {
	ctrlSet{value: 1}
}
call HiToLoAndLoToHi();
if hitOver {
	changeState{value: $nextState; ctrl: 1}
}

#---------------------------------------------------------------------------------
[Function CheckInstantBlock()]
if numhelper(4300) >= 1 && helper(4300),stateno = 4300 {
	if time = 1 {
		PowerAdd{value: 50;}
		PalFX{time: 8; add: 128, 128, 200;}
	}
	if time >= 8 {
		ChangeState{value: 151;}
	}
	ignorehitpause if time = 0 && numenemy && gethitvar(damage) > 0 {
		lifeadd{value: gethitvar(damage);}
	}
}

#-------------------------------------------------------------------------------
[Function GetHitShaking(lAnim)]
if time = 0 {
	if GetHitVar(animtype) != [3,5] {
		ChangeAnim{value: 5020 + GetHitVar(animtype);}
	} else {
		ChangeAnim{value: 5030;}
	}
	if (GetHitVar(animtype) = [4,5]) && (SelfAnimExist(5047 + GetHitVar(animtype))) { #
		ChangeAnim{value: 5047 + GetHitVar(animtype);}
	}
} else {
	changeAnim{value: anim}
}

#-------------------------------------------------------------------------------
[Function GetHitKnockedBack(lAnim, nextState)]
if time = 0 {
	hitVelSet{x: 1}
}
if animTime = 0 {
	changeAnim{value: $lAnim + GetHitVar(animtype);}
}
if time >= getHitVar(slideTime) {
	velMul{x: .6}
}
if hitOver {
	velSet{x: 0}
	MapSet{map: "defence"; value: 0;}
	changeState{value: $nextState; ctrl: 1}
}

#-------------------------------------------------------------------------------
[Function SelfAnimExistAddMod10(cond, base) ret]
let ret = cond($cond && selfAnimExist($base + anim % 10),
	$base + anim % 10, $base);

#-------------------------------------------------------------------------------
[Function HitGroundEffect(vely)]
explod{
	anim: F(60 + ($vely > const240p(5)) + ($vely > const240p(14)));
	posType: none; #p1
	pos: pos x + cameraPos x, 0; #0, 0
	facing: facing;
	sprPriority: ifElse($vely <= const240p(14), -10, 10);
}
playSnd{value: F7, ($vely > const720p(20)) + ($vely > const240p(56))}

#===============================================================================
# Common States
#-------------------------------------------------------------------------------
# Stand
[StateDef 0; type: S; physics: S; sprPriority: 0;]

if (Anim != 0 && Anim != 5 && Anim != 2000) 
|| (Anim = 5 && AnimTime = 0) {
	changeAnim{value: ifelse(var(10)=0,0,2000)}
}
if time = 0 {
	velSet{y: 0}
}
if time = 4 || abs(vel x) < const(movement.stand.friction.threshold) {
	velSet{x: 0}
}
if pos y < 0 {
	ChangeState{
		value: 50;
		ctrl: 0;
	}
}
if !alive {
	changeState{value: 5050; ctrl: 0}
}

#-------------------------------------------------------------------------------
# Stand to Crouch
[StateDef 10; type: C; physics: C; anim: ifelse(var(10)=0,10,2005);]

if time = 0 {
	velMul{x: .75}
}
if abs(vel x) < const(movement.crouch.friction.threshold) {
	velSet{x: 0}
}
if animTime = 0 {
	changeState{value: 11}
}

#-------------------------------------------------------------------------------
# Crouching
[StateDef 11; type: C; physics: C; anim: ifelse(var(10)=0,11,2010); sprPriority: 0;]

if anim = 6 && animTime = 0 {
	changeAnim{value: ifelse(var(10)=0,11,2010);}
}
if abs(vel x) < const(movement.crouch.friction.threshold) {
	velSet{x: 0}
}

#-------------------------------------------------------------------------------
# Crouch to Stand
[StateDef 12; type: S; physics: S; anim: ifelse(var(10)=0,12,2015);]
if time = 0 {
	PlaySnd{value: S12,0; volumescale: 100}
}
if animTime = 0 {
	changeState{value: 0}
}

#-------------------------------------------------------------------------------
# Walk
[StateDef 20; type: S; physics: S; sprPriority: 0;]

if command = "holdback" {
	velSet{x: const(velocity.walk.back.x)}
} else if command = "holdfwd" {
	velSet{x: const(velocity.walk.fwd.x)}
}
if vel x > 0 {
	if cond(anim = 5, animTime = 0, Anim != 20 && anim != 2020) {
		changeAnim{value: ifelse(var(10)=0,20,2020)}
	}
} else if vel x < 0 {
	if cond(anim = 5, animTime = 0, Anim != 21 && anim != 2021) {
		changeAnim{value: ifelse(var(10)=0,21,2021)}
	}
}

#-------------------------------------------------------------------------------
# Jump Start
[StateDef 40; type: S; physics: S; anim: ifelse(var(10)=0,40,2040); ctrl: 0; sprPriority: 1; faceP2: 1;]

if time = 0 {
	Helper{
		name: "Disable Jump Block";
		ID: 4200;
		stateno: 4200;
		pos: 9999,9999;
		postype: p1;
		facing: 1;
		keyctrl: 0;
		supermovetime: 0;
		pausemovetime: 0
	}

	if (ailevel = 0
	|| (abs(P2Bodydist x) <= 30 && ailevel > 0 && random < 200 && p2movetype != H)) {
		sysVar(1) := 0;
	}

	if (command = "holdfwd" && ailevel = 0)
	|| (abs(P2Bodydist X) > 100 && ailevel > 0 && random < 300 && random >= 200 && p2movetype != H) {
		sysVar(1) := 1;
	} else if (command = "holdback" && ailevel = 0)
	|| (p2movetype = A && abs(P2Bodydist X) < 50 && ailevel > 0 && random < 400 && random >= 300 && p2movetype != H) {
		sysVar(1) := -1;
	}

	PlaySnd{
		value: S7,0;
		volumescale: 100;
	}
}

if time = 5 {
	Explod{
		anim: F17000;
		ID: 17000;
		pos: 0,10;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: 1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -2;
		pausemovetime: 0;
		scale: 0.5,0.5;
		sprpriority: 2;
	}
}

if animTime = 0 {
	if sysVar(1) = 0 {
		let x = const(velocity.jump.neu.x);
	} else if sysVar(1) = 1 {
		if prevStateNo = 100 {
			let x = const(velocity.runjump.fwd.x);
		} else {
			let x = const(velocity.jump.fwd.x);
		}
	} else {
		let x = const(velocity.jump.back.x);
	}
	velSet{x: $x; y: const(velocity.jump.y)}

	if p2dist x < 0 {
		Turn{}
	}

	if var(10) = 0 {
		changeState{value: 50; ctrl: 1}
	} else {
		changeState{value: 2050; ctrl: 1}
	}
}

#-------------------------------------------------------------------------------
# AirJump Start
[StateDef 45; type: A; physics: N; ctrl: 0; velSet: 0, 0;]

changeAnim{value: ifElse(selfAnimExist(44), 44, 41)}
if time = 0 {
	var(3) := 1;

	sysVar(1) := 0;

	PlaySnd{
		value: S7,0;
		volumescale: 100;
	}
}

if SelfAnimExist(44) {
	ChangeAnim{value: ifelse(var(10)=0,44,2044);}
} else {
	ChangeAnim{value: ifelse(var(10)=0,41,2041);}
}

if ailevel = 0 {
	if command = "holdback" {
		sysVar(1) := -1;
	} else if command = "holdfwd" {
		sysVar(1) := 1;
	}
} else {
	if roundstate = 2 && random < (ailevel * 100) && p2movetype != H {
		sysvar(1) := 0;
	}
	if roundstate = 2 && random < (ailevel * 100) && p2movetype != H {
		sysvar(1) := 1;
	}
	if roundstate = 2 && random < (ailevel * 100) && p2movetype != H {
		sysvar(1) := -1;
	}
}

if time = 2 {
	if sysVar(1) = 0 {
		let x = const(velocity.airjump.neu.x);
	} else if sysVar(1) = 1 {
		let x = const(velocity.airjump.fwd.x);
	} else {
		let x = const(velocity.airjump.back.x);
	}
	velSet{x: $x; y: const(velocity.airjump.y)}

	if var(10) = 0 {
		changeState{value: 50; ctrl: 1}
	} else {
		changeState{value: 2050; ctrl: 1}
	}
}

#-------------------------------------------------------------------------------
# Air Dash - Forward
[StateDef 65; type: A; movetype: I; physics: N;
velSet: 0, 0; ctrl: 0; anim: ifelse(var(10)=0,196,2065); sprpriority: 2;]

if AnimElem = 1 {
	AfterImage{
		time: 10;
		paladd: 140, 0, 255;
		trans: add;
	}
}

if time = 1 {
	if numhelper(51000) = 1
	&& (prevstateno != 45 || prevstateno != (50,51))
	&& statetype = A {
		Explod{
			anim: F1500;
			ID: 1500;
			pos: 0,-10;
			postype: p1;
			facing: 1;
			vfacing: 1;
			bindtime: 1;
			vel: 0,0;
			accel: 0,0;
			random: 0,0;
			removetime: -2;
			pausemovetime: 0;
			scale: 1,1;
			ontop: 0;
			shadow: 0,0,0;
			ownpal: 0;
			removeongethit: 0;
			ignorehitpause: 1;
			sprpriority: 3;
		}
	}
}
else if time = 2 {
	if prevstateno = 50 || prevstateno = 80 {
		VelSet{x: 5.5; y: -1.5;}
	} else {
		VelSet{x: 5.5; y: -3;}
	}

	CtrlSet{value: 1;}
} else if time = 15   {
	ChangeState{value: 50; ctrl: 1;}
}

if time >= 4 {
StateTypeSet{statetype: A; movetype: I; physics: A;}
}

if time > 2 && pos y >= -1 {
	ChangeState{value: 52; ctrl: 1;}
}

#-------------------------------------------------------------------------------
# Instant Airdash
[StateDef 66; type: A; movetype: I; physics: N;
ctrl: 0; anim: ifelse(var(10)=0,196,2065); sprpriority: 2;]

if AnimElem = 1 {
	AfterImage{
		time: 10;
		paladd: 140, 0, 255;
		trans: add;
	}
}

if time = 0 {
	var(4) := 1;

	#-------------Experimental---------------
	ChangeAnim{value: ifelse(var(10)=0,43,2043);}
	#----------------------------------------
} else if time = 2 {
	VelSet{y: 0;}
	VelMul{x: 1.02;}
	CtrlSet{value: 1;}
} else if time = 15 {
	ChangeState{value: 50; ctrl: 1;}
}

if time >= 2 {
	VelMul{x: 0.97;}
}

if time >= 7 {
	StateTypeSet{statetype: A; movetype: I; physics: A;}
}


if time > 2 && pos y >= -1 {
	ChangeState{value: 52; ctrl: 1;}
}

#-------------------------------------------------------------------------------
# Air Dash - Backward
[StateDef 70; type: A; movetype: I; physics: A;
velSet: 0, 0; ctrl: 0; anim: ifelse(var(10)=0,197,2070); sprpriority: 2;]

if AnimElem = 1 {
	AfterImage{
		time: 10;
		paladd: 140, 0, 255;
		trans: add;
	}
}

if time = 1 {
	if numhelper(51000) = 1
	&& (prevstateno != 45 || prevstateno != (50,51))
	&& statetype = A {
		Explod{
			anim: F1500;
			ID: 1500;
			pos: 0,-10;
			postype: p1;
			facing: 1;
			vfacing: 1;
			bindtime: 1;
			vel: 0,0;
			accel: 0,0;
			random: 0,0;
			removetime: -2;
			pausemovetime: 0;
			scale: 1,1;
			ontop: 0;
			shadow: 0,0,0;
			ownpal: 0;
			removeongethit: 0;
			ignorehitpause: 1;
			sprpriority: 3;
		}
	}
}
else if time = 2 {
	CtrlSet{value: 1;}
}

if prevstateno = 50 || prevstateno = 80 {
	if time = 1 {
		VelSet{x: -5; y: -2;}
	} else if time = 15 {
		ChangeState{value: 50; ctrl: 1;}
	}
} else if time = 2{
	VelSet{x: -5; y: -4;}
}

if time >= 2 {
	StateTypeSet{statetype: A; movetype: I; physics: A;}
}

if time > 2 && pos y >= -1 {
	ChangeState{value: 52; ctrl: 1;}
}

#-------------------------------------------------------------------------------
# Jump Land
[StateDef 52; type: S; physics: S; ctrl: 0; anim: ifelse(var(10)=0,47,2047);]

if prevstateno = 5040 || prevstateno = 5035 {
	if time = 0 {
		NotHitBy{value: SCA; time: 1;}
	}
}

if prevstateno = 5040 || prevstateno = 5035 || prevstateno = 5210 {
	CtrlSet{value: 1;}
}

if time = 0 {
	velSet{y: 0}
	posSet{y: 0}
} else if time = 3 {
	ctrlSet{value: 1}
}

if InGuardDist && command = "holddown" && command = "holdback" {
	ChangeState{value: 120;}
}

if AnimElem = 1 {
	PlaySnd{value: S3,3; volumescale: 100;}
}

if abs(vel x) < Const(movement.stand.friction.threshold) {
	VelSet{x: 0;}
}

if animTime = 0 {
	changeState{value: 0; ctrl: 1}
}

#-------------------------------------------------------------------------------
# Run forward
[StateDef 100; type: S; physics: S; anim: ifelse(var(10)=0,100,2100); sprPriority: 1;]

if numhelper(51000) = 1 && prevstateno != 0 && prevstateno != 20 && time = 1 {
	Explod{
		anim: F1500;
		ID: 1500;
		pos: 0,-10;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: 1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -2;
		pausemovetime: 0;
		scale: 1,1;
		ontop: 0;
		shadow: 0,0,0;
		ownpal: 0;
		removeongethit: 0;
		ignorehitpause: 1;
		sprpriority: 3;
	}
}

if AnimElem = 1 {
	Explod{
		anim: F16000;
		ID: 16000;
		pos: -40,0;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: 1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -2;
		pausemovetime: 0;
		scale: 0.75,0.75;
		sprpriority: 2;
		ontop: 0;
		shadow: 0,0,0;
		ownpal: 0;
	}
}

velSet{x: const(velocity.run.fwd.x)}
assertSpecial{flag: noWalk; flag2: noAutoTurn}
if command != "holdfwd" {
	changeState{value: 0}
}

# Ai
if ailevel < 0 && (time > 20 || p2dist x < 20) {
	changeState{value: 0}
}

#-------------------------------------------------------------------------------
# Hop backwards
[StateDef 105; type: A; physics: A; ctrl: 0; anim: ifelse(var(10)=0,105,2105); sprPriority: 1;]

if AnimElem = 1 {
	NotHitBy{value: SCA; time: 4;}
}

if time = 0 {
	velSet{x: const(velocity.run.back.x); y: const(velocity.run.back.y)}
} else if time = 1 {
	Helper{
		ID: 4200;
		stateno: 4200;
		pos: 9999,9999;
		postype: p1;
		facing: 1;
		keyctrl: 0;
		supermovetime: 0;
		pausemovetime: 0;
	}
} else if time = 2 {
	ctrlSet{value: 1}
}

if AnimElem = 1 {
	Explod{
		anim: F16100;
		ID: 16100;
		pos: 30,5;
		postype: p1;
		facing: 1;
		vfacing: 1;
		bindtime: 1;
		vel: 0,0;
		accel: 0,0;
		random: 0,0;
		removetime: -2;
		pausemovetime: 0;
		scale: 0.75,0.75;
		sprpriority: 2;
		ontop: 0;
		shadow: 0,0,0;
		ownpal: 0;
	}

	PlaySnd{value: S3,3; volumescale: 100;}
}

if numhelper(4200) > 0 {
	AssertSpecial{flag: NoAirGuard;}
}

if vel y > 0 && pos y >= 0 {
	changeState{value: 106}
}